name: Build, Push and Sign Docker Image

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  
jobs:
  build_and_push:
    #runs-on: arc-runner-set
    runs-on: ubuntu-latest 
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.3
        with:
          fetch-depth: 1
      - name: Install curl 
        run: |
          sudo apt-get update
          sudo apt-get install -y curl libcurl4-openssl-dev libharfbuzz-dev libfribidi-dev libfreetype6-dev libc6 -y netcat
          sudo apt install build-essential libcurl4-gnutls-dev libxml2-dev libssl-dev jq curl -y
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.11.6

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build Docker image
        id: build-and-push
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
         #digest=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }})
              
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: sign container image
        run: |
            #cosign sign --key env://COSIGN_KEY ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -y
            echo $COSIGN_PASSWORD | cosign sign --key env://COSIGN_KEY ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -y
        env:
          COSIGN_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          COSIGN_PUB_KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}

# name: Pull, Verify, and Run Docker Image

# on:
#   push:
#     branches:
#       - main

# jobs:
#   pull_verify_and_run:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4.1.3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Pull Docker Image
        run: |
          #echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          #docker pull ghcr.io/yourusername/yourimage:latest
        
      - name: Verify Docker Image
        run: |
          #cosign verify --key env://COSIGN_PUB_KEY ghcr.io/yourusername/yourimage:latest
          cosign verify --key env://COSIGN_PUB_KEY ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        env:
          # COSIGN_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          # COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          COSIGN_PUB_KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
         
      - name: Run Docker Container
        run: |
          #docker run -dit -p 8000:8000 ghcr.io/yourusername/yourimage:latest
          docker run -dit -p 8000:8000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
      
      - name: Check if container is running
        run: |
          docker ps -a | grep ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
      - name: Check if port 8000 is accessible
        run: |
          nc -zv localhost 8000 || exit 1

